function createTag(n){const t=document.createElement("div");t.setAttribute("class","tag");const r=document.createElement("span");r.innerHTML=n;const i=document.createElement("i");return i.innerHTML="close",i.setAttribute("class","material-icons"),i.setAttribute("data-item",n),t.appendChild(r),t.appendChild(i),t}function clearTags(){document.querySelectorAll(".tag").forEach(n=>{n.parentElement.removeChild(n)})}function addTags(){clearTags();tags.slice().reverse().forEach(n=>{tagContainer.prepend(createTag(n))})}function GameContainsAllTags(n,t){let i=n.childNodes[3].childNodes[3].innerText;for(let n=0;n<t.length;n++)if(console.log(t[n]),i.indexOf("#"+t[n]+" ")==-1)return!1;return!0}function UpdateGames(n,t){for(let i=0;i<n.length;i++)GameContainsAllTags(n[i],t)?n[i].classList.contains("hidden")&&(n[i].classList.remove("hidden"),n[i].classList.add("d-flex")):(console.log(n[i]),n[i].classList.contains("hidden")||(n[i].classList.remove("d-flex"),n[i].classList.add("hidden")))}function MakeElements(n){let t=new Map;return n.forEach(n=>{t.set(n,document.createElement(n))}),t}function AddGame(n,t){const r=document.querySelector(".games");console.log("1");let i=MakeElements(["li","img","div","p","h3","button"]);i.get("p").innerHTML=t;i.get("p").classList.add("tags");i.get("button").setAttribute("type","button");i.get("button").classList.add("btn");i.get("button").innerHTML="Join";i.get("button").classList.add("btn-primary");i.get("button").classList.add("join-game");i.get("h3").innerHTML=n;i.get("h3").classList.add("tags");i.get("img").setAttribute("src","img/preview.png");i.get("li").classList.add("game");i.get("li").classList.add("d-flex");i.get("li").classList.add("col-md-4");i.get("li").classList.add("game-"+n);i.get("div").append(i.get("h3"));i.get("div").append(i.get("p"));i.get("div").append(i.get("button"));i.get("li").append(i.get("img"));i.get("li").append(i.get("div"));console.log("99");r.append(i.get("li"));console.log("100");i.get("button").addEventListener("click",function(){console.log(123);hubConnection.invoke("Join",n,t);console.log(124)});console.log("101")}function MakeGameField(){document.querySelector(".search").classList.add("hidden");document.querySelector(".play").classList.remove("hidden");console.log("Work");let t=document.querySelector(".play"),n=document.createElement("h1");n.innerHTML="Waiting your opponent";t.append(n)}const tagContainer=document.querySelector(".tag-container"),input=document.querySelector(".tag-container input");let tags=[];input.addEventListener("keyup",n=>{if(n.key==="Enter"){n.target.value.split(",").forEach(n=>{tags.push(n)});addTags();input.value="";let t=document.querySelectorAll(".game");UpdateGames(t,tags)}});document.addEventListener("click",n=>{if(n.target.tagName==="I"){const i=n.target.getAttribute("data-item"),t=tags.indexOf(i);tags=[...tags.slice(0,t),...tags.slice(t+1)];addTags();let r=document.querySelectorAll(".game");UpdateGames(r,tags)}});input.focus();const hubConnection=(new signalR.HubConnectionBuilder).withUrl("/games").build();hubConnection.on("SelfJoin",function(){});hubConnection.on("OthersCreate",function(n,t){AddGame(n,t)});hubConnection.on("SelfCreate",function(n){MakeGameField(n,tags)});hubConnection.on("InitXPlayer",function(){console.log("chlen");document.querySelector(".play > h1").innerHTML="opponent was found"});hubConnection.on("InitOPlayer",function(){console.log("Oplayer");document.querySelector(".search").classList.add("hidden");document.querySelector(".play").classList.remove("hidden");let t=document.querySelector(".play"),n=document.createElement("h1");n.innerHTML="Opponent was found";t.append(n)});hubConnection.on("UpdateOther",function(n){console.log("Other players!");const t=document.querySelector(".game-"+n);t!=undefined&&t.remove()});const createButton=document.querySelector(".create-game > button");createButton.addEventListener("click",function(){let n=document.querySelector("#inputGameName").value,t=document.querySelector("#inputTags").value;console.log(9);hubConnection.invoke("Create",n,t)});hubConnection.start();